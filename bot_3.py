import telebot
import requests
import re

TOKEN = "7787503861:AAFUh4ob-A-_Ys_67xcOPySeGcCub3VsxV8"
API_KEY = "2bf5650f913d63f7b35ad78e"
BASE_URL = "https://open.er-api.com/v6/latest/"

bot = telebot.TeleBot(TOKEN)

CURRENCIES = {
    "USD": "–î–æ–ª–∞—Ä –°–®–ê",
    "EUR": "–Ñ–≤—Ä–æ",
    "UAH": "–ì—Ä–∏–≤–Ω—è",
    "GBP": "–§—É–Ω—Ç —Å—Ç–µ—Ä–ª—ñ–Ω–≥—ñ–≤",
    "JPY": "–Ñ–Ω–∞",
    "CAD": "–ö–∞–Ω–∞–¥—Å—å–∫–∏–π –¥–æ–ª–∞—Ä",
    "PLN": "–ó–ª–æ—Ç–∏–π",
}


@bot.message_handler(commands=["start"])
def send_welcome(message):
    help_text = (
        "üí± *–ë–æ—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –≤–∞–ª—é—Ç*\n\n"
        "–ù–∞–ø–∏—à—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
        "`<—Å—É–º–∞> <–≤–∞–ª—é—Ç–∞1> –≤ <–≤–∞–ª—é—Ç–∞2>`\n\n"
        "*–ü—Ä–∏–∫–ª–∞–¥:*\n"
        "`100 USD –≤ UAH`\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏:\n"
    )

    currencies_list = "\n".join(
        [f"- {code}: {name}" for code, name in CURRENCIES.items()]
    )

    bot.send_message(
        message.chat.id, help_text + currencies_list, parse_mode="Markdown"
    )


@bot.message_handler(commands=["help"])
def send_help(message):
    send_welcome(message)  


def get_exchange_rates(base_currency):
    try:
        response = requests.get(f"{BASE_URL}{base_currency}?apikey={API_KEY}")
        data = response.json()
        if data["result"] == "success":
            return data["rates"]
        return None
    except:
        return None


def convert_currency(amount, from_currency, to_currency):
    rates = get_exchange_rates(from_currency)
    if not rates:
        return None

    if to_currency not in rates:
        return None

    converted_amount = float(amount) * rates[to_currency]
    return round(converted_amount, 2)


@bot.message_handler(content_types=["text"])
def handle_text(message):
    try:
        match = re.match(
            r"(\d+\.?\d*)\s+([A-Za-z]{3})\s+(–≤|to)\s+([A-Za-z]{3})",
            message.text,
            re.IGNORECASE,
        )
        if not match:
            bot.reply_to(
                message,
                "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ:\n`100 USD –≤ EUR`",
                parse_mode="Markdown",
            )
            return

        amount, from_curr, _, to_curr = match.groups()
        from_curr = from_curr.upper()
        to_curr = to_curr.upper()

        if from_curr not in CURRENCIES or to_curr not in CURRENCIES:
            unsupported = []
            if from_curr not in CURRENCIES:
                unsupported.append(from_curr)
            if to_curr not in CURRENCIES:
                unsupported.append(to_curr)
            bot.reply_to(message, f"–í–∞–ª—é—Ç–∞ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è: {', '.join(unsupported)}")
            return

        result = convert_currency(amount, from_curr, to_curr)
        if result is None:
            bot.reply_to(message, "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
            return

        response = (
            f"üí± *–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:*\n\n"
            f"{amount} {from_curr} = *{result} {to_curr}*\n\n"
            f"1 {from_curr} = {round(result/float(amount), 4)} {to_curr}\n"
            f"1 {to_curr} = {round(float(amount)/result, 4)} {from_curr}"
        )

        bot.reply_to(message, response, parse_mode="Markdown")

    except ValueError:
        bot.reply_to(message, "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó.")
    except Exception as e:
        bot.reply_to(message, "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


bot.polling(none_stop=True)
