import telebot
from telebot import types
import sqlite3


TOKEN = "8111206814:AAH161P_-hRREUD-hOn-CRDQdyOOz8K3dzE"
bot = telebot.TeleBot(TOKEN)

conn = sqlite3.connect("rent_bot.db", check_same_thread=False)
cursor = conn.cursor()

cursor.execute(
    """
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    phone TEXT
)
"""
)

cursor.execute(
    """
CREATE TABLE IF NOT EXISTS properties (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    type TEXT,
    rooms INTEGER,
    price INTEGER,
    address TEXT,
    photo BLOB,
    FOREIGN KEY (user_id) REFERENCES users (id)
)
"""
)
conn.commit()

user_data = {}


def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"))
    markup.add(types.KeyboardButton("üè† –ü–æ—à—É–∫ –∂–∏—Ç–ª–∞"))
    markup.add(types.KeyboardButton("üìã –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è"))
    markup.add(types.KeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏"))
    return markup


@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –û–±–∏—Ä–∞–π—Ç–µ –¥—ñ—é:", reply_markup=main_menu())


@bot.message_handler(func=lambda message: message.text == "‚ûï –î–æ–¥–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
def add_property(message):
    user_data[message.chat.id] = {}
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("–ö–≤–∞—Ä—Ç–∏—Ä–∞"), types.KeyboardButton("–ë—É–¥–∏–Ω–æ–∫"))
    bot.send_message(
        message.chat.id, "üè† –í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –Ω–µ—Ä—É—Ö–æ–º–æ—Å—Ç—ñ:", reply_markup=markup
    )
    bot.register_next_step_handler(message, process_type)


def process_type(message):
    if message.text not in ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–ë—É–¥–∏–Ω–æ–∫"]:
        bot.send_message(
            message.chat.id, "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–∑ –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤."
        )
        return add_property(message)

    user_data[message.chat.id]["type"] = message.text
    bot.send_message(message.chat.id, "üõè –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—ñ–º–Ω–∞—Ç (—á–∏—Å–ª–æ):")
    bot.register_next_step_handler(message, process_rooms)


def process_rooms(message):
    try:
        rooms = int(message.text)
        if rooms <= 0:
            raise ValueError
        user_data[message.chat.id]["rooms"] = rooms
        bot.send_message(message.chat.id, "üíµ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —É $ (—á–∏—Å–ª–æ):")
        bot.register_next_step_handler(message, process_price)
    except ValueError:
        bot.send_message(
            message.chat.id, "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –∫—ñ–º–Ω–∞—Ç!"
        )
        bot.register_next_step_handler(message, process_rooms)


def process_price(message):
    try:
        price = int(message.text)
        if price <= 0:
            raise ValueError
        user_data[message.chat.id]["price"] = price
        bot.send_message(message.chat.id, "üìç –í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:")
        bot.register_next_step_handler(message, process_address)
    except ValueError:
        bot.send_message(message.chat.id, "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É!")
        bot.register_next_step_handler(message, process_price)


def process_address(message):
    if not message.text.strip():
        bot.send_message(message.chat.id, "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É!")
        bot.register_next_step_handler(message, process_address)
        return

    user_data[message.chat.id]["address"] = message.text.strip()
    bot.send_message(message.chat.id, "üì∏ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –æ–±'—î–∫—Ç–∞:")
    bot.register_next_step_handler(message, process_photo)


def process_photo(message):
    try:
        if not message.photo:
            bot.send_message(message.chat.id, "‚ö† –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ.")
            bot.register_next_step_handler(message, process_photo)
            return

        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)

        cursor.execute(
            """
        INSERT INTO properties (user_id, type, rooms, price, address, photo) 
        VALUES (?, ?, ?, ?, ?, ?)
        """,
            (
                message.chat.id,
                user_data[message.chat.id]["type"],
                user_data[message.chat.id]["rooms"],
                user_data[message.chat.id]["price"],
                user_data[message.chat.id]["address"],
                downloaded_file,
            ),
        )
        conn.commit()

        # –û—á–∏—â–∞—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ
        del user_data[message.chat.id]

        bot.send_message(
            message.chat.id, "‚úÖ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu()
        )
    except Exception as e:
        bot.send_message(
            message.chat.id,
            "‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            reply_markup=main_menu(),
        )


@bot.message_handler(func=lambda message: message.text == "üè† –ü–æ—à—É–∫ –∂–∏—Ç–ª–∞")
def search_property(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ö–≤–∞—Ä—Ç–∏—Ä–∏", callback_data="type_–ö–≤–∞—Ä—Ç–∏—Ä–∞"))
    markup.add(types.InlineKeyboardButton("–ë—É–¥–∏–Ω–∫–∏", callback_data="type_–ë—É–¥–∏–Ω–æ–∫"))
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∂–∏—Ç–ª–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith("type_"))
def callback_query(call):
    try:
        property_type = call.data.split("_")[1]
        cursor.execute("SELECT * FROM properties WHERE type=?", (property_type,))
        properties = cursor.fetchall()
        if not properties:
            bot.send_message(call.message.chat.id, "–ù–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤.")
            return
        for prop in properties:
            text = f"üìç –ê–¥—Ä–µ—Å–∞: {prop[5]}\nüèò –ö—ñ–º–Ω–∞—Ç: {prop[3]}\nüíµ –¶—ñ–Ω–∞: {prop[4]} $"
            if prop[6]:  # –Ø–∫—â–æ —î —Ñ–æ—Ç–æ
                try:
                    bot.send_photo(call.message.chat.id, photo=prop[6], caption=text)
                except Exception as e:
                    bot.send_message(call.message.chat.id, text)
            else:
                bot.send_message(call.message.chat.id, text)
    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É.")


@bot.message_handler(func=lambda message: message.text == "üìã –ú–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è")
def my_properties(message):
    try:
        cursor.execute("SELECT * FROM properties WHERE user_id=?", (message.chat.id,))
        properties = cursor.fetchall()

        if not properties:
            bot.send_message(message.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö –æ–≥–æ–ª–æ—à–µ–Ω—å.")
            return

        for prop in properties:
            text = f"üìç –ê–¥—Ä–µ—Å–∞: {prop[5]}\nüèò –ö—ñ–º–Ω–∞—Ç: {prop[3]}\nüíµ –¶—ñ–Ω–∞: {prop[4]} $"
            if prop[6]:
                try:
                    bot.send_photo(message.chat.id, photo=prop[6], caption=text)
                except Exception as e:
                    bot.send_message(message.chat.id, text)
            else:
                bot.send_message(message.chat.id, text)
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö† –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@bot.message_handler(func=lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏")
def ask_phone(message):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    markup.add(types.KeyboardButton("üì≤ –ù–∞–¥–∞—Ç–∏ –Ω–æ–º–µ—Ä", request_contact=True))
    bot.send_message(
        message.chat.id,
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:",
        reply_markup=markup,
    )


@bot.message_handler(content_types=["contact"])
def save_contact(message):
    try:
        cursor.execute(
            """
        INSERT OR REPLACE INTO users (id, username, first_name, last_name, phone) 
        VALUES (?, ?, ?, ?, ?)
        """,
            (
                message.chat.id,
                message.from_user.username,
                message.from_user.first_name,
                message.from_user.last_name,
                message.contact.phone_number,
            ),
        )
        conn.commit()
        bot.send_message(
            message.chat.id, "‚úÖ –í–∞—à –Ω–æ–º–µ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=main_menu()
        )
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö† –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        conn.close()
